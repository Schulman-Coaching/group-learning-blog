// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  accounts            Account[]
  sessions            Session[]
  forumPosts          ForumPost[]
  forumComments       ForumComment[]
  userLikes           UserLike[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Author {
  id          String    @id @default(cuid())
  name        String
  bio         String?
  birthYear   Int?
  deathYear   Int?
  nationality String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  writings Writing[]

  @@map("authors")
}

model Writing {
  id          String    @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  type        WritingType
  year        Int?
  tags        String? // JSON string for SQLite compatibility
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author Author @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("writings")
}

model ForumPost {
  id          String    @id @default(cuid())
  title       String
  content     String
  category    String
  tags        String? // JSON string for SQLite compatibility
  views       Int       @default(0)
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  ForumComment[]
  userLikes UserLike[]

  @@map("forum_posts")
}

model ForumComment {
  id          String    @id @default(cuid())
  content     String
  postId      String
  authorId    String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  post   ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("forum_comments")
}

model UserLike {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime  @default(now())

  user User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  post ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("user_likes")
}

enum WritingType {
  ARTICLE
  BOOK
  BOOK_CHAPTER
  ESSAY
  LECTURE
  INTERVIEW
  CASE_STUDY
  RESEARCH_PAPER
}